{"version":3,"sources":["Redux/user/userTypes.js","Constants/defaultImageUrl.js","Services/createNewUser.js","Services/getUsers.js","Services/login.js","Redux/modal/modalTypes.js","Redux/modal/modalActions.js","Utils/checkIfStringsIncludeFilter.js","Utils/saveUserToLocalStorage.js","Redux/user/userActions.js","Components/Navigation.jsx","Components/FormValidationMessage.jsx","Components/FormControl.jsx","Components/LoginForm.jsx","Pages/LoginPage.jsx","Components/ImageCropper.jsx","Components/AddRemoveImageButton.jsx","Components/ImagePreview.jsx","Components/CreateNewUserForm.jsx","Components/CreateNewUserModal.jsx","Components/UserCard.jsx","Components/UserList.jsx","Pages/MainPage.jsx","Redux/modal/modalReducer.js","Redux/user/userReducer.js","Redux/store.js","App.js","reportWebVitals.js","index.js"],"names":["SET_USERS","ADD_USER","LOGIN_USER","LOGOUT_USER","SET_PREVIEW_IMAGE","defaultImageUrl","createNewUserUrl","body","a","bodyCopy","avatar","fetch","method","headers","JSON","stringify","response","json","data","status","createNewUser","usersUrl","getUsers","url","credentials","error","token","login","OPEN_MODAL","CLOSE_MODAL","closeModal","type","checkIfStringsIncludeFilter","filter","strings","i","length","toLowerCase","includes","saveUserToLocalStorage","user","locallyCreatedUsers","parse","localStorage","getItem","push","newLocallyCreatedUsers","setItem","setUsers","users","payload","handleLogout","dispatch","removeItem","connect","state","isLoggedIn","props","className","onClick","to","FormValidationMessage","children","FormControl","label","name","htmlFor","id","component","LoginForm","onSubmit","validationSchema","Yup","email","required","password","initialValues","handleLogin","toast","ImageCropper","imageElement","useRef","useEffect","Cropper","current","zoomable","scalable","aspectRatio","src","ref","width","alt","AddRemoveImageButton","callback","textContent","event","preventDefault","previewImage","setPreviewImage","image","useState","setImage","fileInputRef","fileReader","FileReader","onloadend","result","readAsDataURL","click","accept","style","display","onChange","file","target","files","slice","first_name","last_name","ImagePreview","CreateNewUserModal","isModalOpen","createUser","Modal","setAppElement","overlayClassName","isOpen","onRequestClose","values","UserCard","UserList","userList","emptyState","map","modal","openModal","fetchUsers","message","userValues","newUser","success","searchBarValue","setSearchBarValue","placeholder","e","value","initialModalState","modalReducer","action","initialUsersState","Boolean","userReducer","filteredUserList","wholeName","store","createStore","combineReducers","applyMiddleware","thunk","App","exact","path","LoginPage","MainPage","position","autoClose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e03d7c43.chunk.js","sourcesContent":["export const SET_USERS = 'SET_USERS';\r\nexport const ADD_USER = 'ADD_USER';\r\nexport const LOGIN_USER = 'LOGIN_USER';\r\nexport const LOGOUT_USER = 'LOGOUT_USER';\r\nexport const SET_PREVIEW_IMAGE = 'SET_PREVIEW_IMAGE';","const defaultImageUrl = 'https://scontent-vie1-1.xx.fbcdn.net/v/t1.0-9/530790_116956241792417_1239022532_n.jpg?_nc_cat=110&ccb=1-3&_nc_sid=09cbfe&_nc_ohc=iW3xye82GuIAX-02m-z&_nc_ht=scontent-vie1-1.xx&oh=46dd6c1b6910a730025b8a6eea77e15f&oe=6073C295';\r\n\r\nexport default defaultImageUrl;","import { defaultImageUrl } from '../Constants';\r\n\r\nconst createNewUserUrl = 'https://reqres.in/api/users';\r\n\r\nasync function createNewUser(body) {\r\n    const bodyCopy = { ...body };\r\n\r\n    if (!bodyCopy.avatar) {\r\n        bodyCopy.avatar = defaultImageUrl;\r\n    }\r\n\r\n    const response = await fetch(createNewUserUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(bodyCopy)\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (response.status >= 400) {\r\n        throw data;\r\n    } else {\r\n        return data;\r\n    }\r\n}\r\n\r\nexport default createNewUser;","const usersUrl = 'https://reqres.in/api/users?per_page=100';\r\n\r\nasync function getUsers() {\r\n    const response = await fetch(usersUrl, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (response.status >= 400) {\r\n        throw data;\r\n    } else {\r\n        return data.data;\r\n    }\r\n}\r\n\r\nexport default getUsers;","const url = 'https://reqres.in/api/login';\r\n\r\nasync function login(credentials) {\r\n    const response = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(credentials)\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (response.status >= 400) {\r\n        throw data.error;\r\n    } else {\r\n        return data.token;\r\n    }\r\n}\r\n\r\nexport default login;","export const OPEN_MODAL = 'OPEN_MODAL';\r\nexport const CLOSE_MODAL = 'CLOSE_MODAL';","import { OPEN_MODAL, CLOSE_MODAL } from './modalTypes'\r\n\r\nexport function openModal() {\r\n    return {\r\n        type: OPEN_MODAL\r\n    };\r\n}\r\n\r\nexport function closeModal() {\r\n    return {\r\n        type: CLOSE_MODAL\r\n    };\r\n}","function checkIfStringsIncludeFilter(filter, ...strings) {\r\n    for (let i = 0; i < strings.length; i++) {\r\n        if (strings[i].toLowerCase().includes(filter.toLowerCase())) {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nexport default checkIfStringsIncludeFilter;","function saveUserToLocalStorage(user) {\r\n    let locallyCreatedUsers = JSON.parse(localStorage.getItem('createdUsersList'));\r\n\r\n    if (!locallyCreatedUsers) {\r\n        locallyCreatedUsers = [];\r\n    }\r\n\r\n    locallyCreatedUsers.push(user);\r\n    const newLocallyCreatedUsers = JSON.stringify(locallyCreatedUsers);\r\n\r\n    localStorage.setItem('createdUsersList', newLocallyCreatedUsers);\r\n}\r\n\r\nexport default saveUserToLocalStorage;","import { toast } from 'react-toastify';\r\n\r\nimport { SET_USERS, ADD_USER, LOGIN_USER, LOGOUT_USER, SET_PREVIEW_IMAGE } from './userTypes';\r\nimport { login, getUsers, createNewUser } from '../../Services';\r\nimport { closeModal } from '../modal/modalActions';\r\nimport { saveUserToLocalStorage } from '../../Utils';\r\n\r\nexport function setUsers({ users, filter }) {\r\n    return {\r\n        type: SET_USERS,\r\n        payload: { users, filter }\r\n    };\r\n}\r\n\r\nexport function setPreviewImage(image) {\r\n    return {\r\n        type: SET_PREVIEW_IMAGE,\r\n        payload: image\r\n    };\r\n}\r\n\r\nexport function addUser(user) {\r\n    return {\r\n        type: ADD_USER,\r\n        payload: user\r\n    };\r\n}\r\n\r\nexport function loginUser() {\r\n    return {\r\n        type: LOGIN_USER\r\n    };\r\n}\r\n\r\nexport function logoutUser() {\r\n    return {\r\n        type: LOGOUT_USER\r\n    };\r\n}\r\n\r\nexport function handleLogout() {\r\n    return (dispatch) => {\r\n        localStorage.removeItem('userToken');\r\n        dispatch(logoutUser());\r\n    }\r\n}\r\n\r\nexport function handleLogin(credentials) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const token = await login(credentials);\r\n            localStorage.setItem('userToken', token);\r\n            dispatch(loginUser());\r\n        } catch (err) {\r\n            toast.error(`Error logging in: ${err}`);\r\n        }\r\n    };\r\n}\r\n\r\nexport function createUser(userValues) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const newUser = await createNewUser(userValues);\r\n            saveUserToLocalStorage(newUser);\r\n            dispatch(addUser(newUser));\r\n            toast.success('Successfully created new user');\r\n            dispatch(closeModal());\r\n        } catch (err) {\r\n            toast.error(`Error creating new user: ${err.message}`);\r\n        }\r\n    };\r\n}\r\n\r\nexport function fetchUsers(filter) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const users = await getUsers();\r\n            const locallyCreatedUsers = JSON.parse(localStorage.getItem('createdUsersList'));\r\n\r\n            if (locallyCreatedUsers) {\r\n                users.push(...locallyCreatedUsers);\r\n            }\r\n\r\n            dispatch(setUsers({ users, filter }));\r\n        } catch (err) {\r\n            toast.error(`Error fetching users: ${err.message}`);\r\n        }\r\n    };\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { handleLogout } from '../Redux/user/userActions';\r\n\r\nfunction Navigation(props) {\r\n    const { isLoggedIn, handleLogout } = props;\r\n\r\n    return (\r\n        <nav>\r\n            {isLoggedIn &&\r\n                <button\r\n                    className=\"logout-btn\"\r\n                    onClick={() => handleLogout()}\r\n                >\r\n                    <Link to=\"/\">Logout</Link>\r\n                </button>\r\n            }\r\n            <h1>User Management App</h1>\r\n        </nav>\r\n    );\r\n}\r\n\r\nNavigation.propTypes = {\r\n    isLoggedIn: PropTypes.bool.isRequired,\r\n    handleLogout: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        handleLogout: () => dispatch(handleLogout())\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction FormValidationMessage(props) {\r\n    return (\r\n        <p className=\"error\">{props.children}</p>\r\n    );\r\n}\r\n\r\nFormValidationMessage.propTypes = {\r\n    children: PropTypes.elementType\r\n};\r\n\r\nexport default FormValidationMessage;","import React from 'react';\r\nimport { Field, ErrorMessage } from 'formik';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport FormValidationMessage from './FormValidationMessage';\r\n\r\nfunction FormControl(props) {\r\n    const { type, label, name } = props;\r\n\r\n    return (\r\n        <div className=\"form-control\">\r\n            <label htmlFor=\"email\">{label}</label>\r\n            <div className=\"input-container\">\r\n                <Field\r\n                    type={type}\r\n                    name={name}\r\n                    id={name}\r\n                />\r\n            </div>\r\n            <ErrorMessage name={name} component={FormValidationMessage} />\r\n        </div>\r\n    );\r\n}\r\n\r\nFormControl.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired\r\n};\r\n\r\nexport default FormControl;","import React from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport FormControl from './FormControl';\r\n\r\nfunction LoginForm(props) {\r\n    const { onSubmit } = props;\r\n    const initialValues = {\r\n        email: '',\r\n        password: '',\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup\r\n            .string()\r\n            .email('Invalid e-mail format')\r\n            .required('Required'),\r\n        password: Yup\r\n            .string()\r\n            .required('Required')\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={onSubmit}\r\n            validationSchema={validationSchema}\r\n        >\r\n            <Form>\r\n                <FormControl\r\n                    type=\"text\"\r\n                    name=\"email\"\r\n                    label=\"E-mail\"\r\n                />\r\n                <FormControl\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                />\r\n                <button className=\"submit-btn\" type=\"submit\">Login</button>\r\n            </Form>\r\n        </Formik>\r\n    );\r\n}\r\n\r\nLoginForm.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default LoginForm;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport LoginForm from '../Components/LoginForm';\r\nimport { handleLogin } from '../Redux/user/userActions';\r\n\r\nfunction LoginPage(props) {\r\n    const { isLoggedIn, handleLogin } = props;\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to=\"/main\" />\r\n    }\r\n\r\n    return (\r\n        <div className=\"screen-container\">\r\n            <main>\r\n                <div className=\"content-container\">\r\n                    <h2>Login</h2>\r\n                    <LoginForm onSubmit={handleLogin} />\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nLoginPage.propTypes = {\r\n    isLoggedIn: PropTypes.bool.isRequired,\r\n    handleLogin: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        handleLogin: (credentials) => dispatch(handleLogin(credentials))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage);","import Cropper from 'cropperjs';\r\nimport 'cropperjs/dist/cropper.min.css';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction ImageCropper(props) {\r\n    const imageElement = useRef(null);\r\n\r\n    useEffect(() => {\r\n        new Cropper(imageElement.current, {\r\n            zoomable: false,\r\n            scalable: false,\r\n            aspectRatio: 1,\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"img-container\">\r\n            <img\r\n                src={props.src}\r\n                ref={imageElement}\r\n                width=\"200px\"\r\n                alt=\"Source\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nImageCropper.propTypes = {\r\n    src: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ImageCropper;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction AddRemoveImageButton(props) {\r\n    const { callback, textContent } = props;\r\n\r\n    return (\r\n        <button\r\n            className=\"add-image-btn\"\r\n            onClick={(event) => {\r\n                event.preventDefault();\r\n                callback();\r\n            }}\r\n        >\r\n            {textContent}\r\n        </button>\r\n    );\r\n}\r\n\r\nAddRemoveImageButton.propTypes = {\r\n    callback: PropTypes.func.isRequired,\r\n    textContent: PropTypes.string.isRequired\r\n};\r\n\r\nexport default AddRemoveImageButton;","import React, { useEffect, useRef, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ImageCropper from './ImageCropper';\r\nimport AddRemoveImageButton from './AddRemoveImageButton';\r\nimport { setPreviewImage } from '../Redux/user/userActions';\r\n\r\nfunction ImageFileInput(props) {\r\n    const { previewImage, setPreviewImage } = props;\r\n    const [image, setImage] = useState();\r\n    const fileInputRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (image) {\r\n            const fileReader = new FileReader();\r\n\r\n            fileReader.onloadend = () => {\r\n                setPreviewImage(fileReader.result);\r\n            };\r\n\r\n            fileReader.readAsDataURL(image);\r\n        } else {\r\n            setPreviewImage(null);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [image]);\r\n\r\n    return (\r\n        <div>\r\n            {previewImage ? (\r\n                <div>\r\n                    <ImageCropper src={previewImage} />\r\n                    <AddRemoveImageButton\r\n                        callback={() => setImage(null)}\r\n                        textContent=\"Remove Image\"\r\n                    />\r\n                </div>\r\n\r\n            ) : (\r\n                <AddRemoveImageButton\r\n                    callback={() => fileInputRef.current.click()}\r\n                    textContent=\"Add Image\"\r\n                />\r\n            )}\r\n            <input\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                style={{ display: \"none\" }}\r\n                ref={fileInputRef}\r\n                onChange={(event) => {\r\n                    const file = event.target.files[0];\r\n\r\n                    if (file && file.type.slice(0, 5) === 'image') {\r\n                        setImage(file);\r\n                    } else {\r\n                        setImage(null);\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nImageFileInput.propTypes = {\r\n    previewImage: PropTypes.string,\r\n    setPreviewImage: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        previewImage: state.user.previewImage\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setPreviewImage: (image) => dispatch(setPreviewImage(image))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageFileInput);","import React from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport FormControl from './FormControl';\r\nimport ImagePreview from './ImagePreview';\r\n\r\nfunction CreateNewUserForm(props) {\r\n    const { onSubmit, previewImage } = props;\r\n\r\n    const initialValues = {\r\n        email: '',\r\n        first_name: '',\r\n        last_name: '',\r\n        avatar: ''\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup\r\n            .string()\r\n            .email('Invalid e-mail format')\r\n            .required('Required'),\r\n        first_name: Yup\r\n            .string()\r\n            .required('Required'),\r\n        last_name: Yup\r\n            .string()\r\n            .required('Required'),\r\n        avatar: Yup\r\n            .string()\r\n            .url('Invalid URL')\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={onSubmit}\r\n            validationSchema={validationSchema}\r\n        >\r\n            <Form>\r\n                <FormControl\r\n                    type=\"text\"\r\n                    name=\"first_name\"\r\n                    label=\"First name\"\r\n                />\r\n                <FormControl\r\n                    type=\"text\"\r\n                    name=\"last_name\"\r\n                    label=\"Last name\"\r\n                />\r\n                <FormControl\r\n                    type=\"text\"\r\n                    name=\"email\"\r\n                    label=\"E-mail\"\r\n                />\r\n                {!previewImage && (\r\n                    <FormControl\r\n                        type=\"text\"\r\n                        name=\"avatar\"\r\n                        label=\"Avatar URL\"\r\n                    />)\r\n                }\r\n                <ImagePreview />\r\n                <button className=\"submit-btn\" type=\"submit\">Create User</button>\r\n            </Form>\r\n        </Formik>\r\n    );\r\n}\r\n\r\nCreateNewUserForm.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n    previewImage: PropTypes.string\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        previewImage: state.user.previewImage\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(CreateNewUserForm);","import React from 'react';\r\nimport Modal from 'react-modal';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CreateNewUserForm from './CreateNewUserForm';\r\n\r\nfunction CreateNewUserModal(props) {\r\n    const { isModalOpen, closeModal, createUser } = props;\r\n\r\n    Modal.setAppElement('#root');\r\n\r\n    return (\r\n        <Modal\r\n            className=\"modal\"\r\n            overlayClassName=\"overlay\"\r\n            isOpen={isModalOpen}\r\n            onRequestClose={closeModal}\r\n        >\r\n            <button className=\"close-modal-btn\" onClick={closeModal}>X</button>\r\n            <CreateNewUserForm onSubmit={(values) => { createUser(values) }} />\r\n        </Modal>\r\n    );\r\n}\r\n\r\nCreateNewUserModal.propTypes = {\r\n    isModalOpen: PropTypes.bool.isRequired,\r\n    closeModal: PropTypes.func.isRequired,\r\n    createUser: PropTypes.func.isRequired\r\n};\r\n\r\nexport default CreateNewUserModal;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction UserCard(props) {\r\n    const { first_name, last_name, avatar } = props.user;\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-image\">\r\n                <img src={avatar} alt=\"user\" />\r\n            </div>\r\n            <div className=\"card-details\">\r\n                <p>{first_name}</p>\r\n                <p>{last_name}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nUserCard.propTypes = {\r\n    user: PropTypes.shape({\r\n        first_name: PropTypes.string.isRequired,\r\n        last_name: PropTypes.string.isRequired,\r\n        avatar: PropTypes.string.isRequired\r\n    }).isRequired\r\n};\r\n\r\nexport default UserCard;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport UserCard from './UserCard';\r\n\r\nfunction UserList(props) {\r\n    const { userList, emptyState } = props;\r\n\r\n    return (\r\n        !emptyState ? (\r\n            <div className=\"user-list\">\r\n                {userList.map(user => (\r\n                    <UserCard user={user} key={user.id} />\r\n                ))}\r\n            </div>\r\n        ) : (\r\n            <div className=\"user-list-empty-state\">No users</div>\r\n        )\r\n    );\r\n}\r\n\r\nUserList.propTypes = {\r\n    userList: PropTypes.arrayOf(PropTypes.shape({\r\n        first_name: PropTypes.string,\r\n        last_name: PropTypes.string,\r\n        email: PropTypes.string,\r\n        avatar: PropTypes.string\r\n    })).isRequired,\r\n    emptyState: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default UserList;","import React, { useEffect, useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport CreateNewUserModal from '../Components/CreateNewUserModal';\r\nimport UserList from '../Components/UserList';\r\nimport { openModal, closeModal } from '../Redux/modal/modalActions';\r\nimport { createUser, fetchUsers } from '../Redux/user/userActions';\r\n\r\nfunction MainPage(props) {\r\n    const { isModalOpen, openModal, closeModal, userList, fetchUsers, createUser, isLoggedIn } = props;\r\n    const [searchBarValue, setSearchBarValue] = useState('');\r\n\r\n    useEffect(() => {\r\n        fetchUsers(searchBarValue);\r\n        // eslint-disable-next-line\r\n    }, [searchBarValue])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    return (\r\n        <div className=\"screen-container\">\r\n            <main>\r\n                <div className=\"content-container\">\r\n                    <div className=\"form-control\">\r\n                        <input\r\n                            placeholder=\"Search\"\r\n                            onChange={(e) => setSearchBarValue(e.target.value)}\r\n                            type=\"search\"\r\n                            name=\"search\"\r\n                            id=\"search\"\r\n                            value={searchBarValue}\r\n                        />\r\n                    </div>\r\n                    <button\r\n                        className=\"create-new-btn\"\r\n                        onClick={openModal}\r\n                    >\r\n                        + Add new user\r\n                    </button>\r\n                    <CreateNewUserModal {...{ isModalOpen, closeModal, createUser }} />\r\n                </div>\r\n                <UserList\r\n                    userList={userList}\r\n                    emptyState={userList.length === 0}\r\n                />\r\n            </main>\r\n        </div >\r\n    );\r\n}\r\n\r\nMainPage.propTypes = {\r\n    isModalOpen: PropTypes.bool.isRequired,\r\n    openModal: PropTypes.func.isRequired,\r\n    closeModal: PropTypes.func.isRequired,\r\n    userList: PropTypes.arrayOf(PropTypes.shape({\r\n        first_name: PropTypes.string,\r\n        last_name: PropTypes.string,\r\n        email: PropTypes.string,\r\n        avatar: PropTypes.string\r\n    })).isRequired,\r\n    fetchUsers: PropTypes.func.isRequired,\r\n    createUser: PropTypes.func.isRequired,\r\n    isLoggedIn: PropTypes.bool.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isModalOpen: state.modal.isModalOpen,\r\n        userList: state.user.userList,\r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        openModal: () => dispatch(openModal()),\r\n        closeModal: () => dispatch(closeModal()),\r\n        fetchUsers: (filter) => dispatch(fetchUsers(filter)),\r\n        createUser: (user) => dispatch(createUser(user))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPage);","import { OPEN_MODAL, CLOSE_MODAL } from './modalTypes';\r\n\r\nconst initialModalState = {\r\n    isModalOpen: false\r\n};\r\n\r\nfunction modalReducer(state = initialModalState, action) {\r\n    switch (action.type) {\r\n        case OPEN_MODAL:\r\n            return {\r\n                ...state,\r\n                isModalOpen: true\r\n            };\r\n        case CLOSE_MODAL:\r\n            return {\r\n                ...state,\r\n                isModalOpen: false\r\n            };\r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n}\r\n\r\nexport default modalReducer;","import { SET_USERS, ADD_USER, LOGIN_USER, LOGOUT_USER, SET_PREVIEW_IMAGE } from './userTypes';\r\nimport { checkIfStringsIncludeFilter } from '../../Utils';\r\n\r\nconst initialUsersState = {\r\n    userList: [],\r\n    isLoggedIn: Boolean(localStorage.getItem('userToken')),\r\n    previewImage: null\r\n};\r\n\r\nfunction userReducer(state = initialUsersState, action) {\r\n    switch (action.type) {\r\n        case SET_USERS:\r\n            const { users, filter } = action.payload;\r\n\r\n            if (filter.length >= 2) {\r\n                const filteredUserList = users.filter(user => {\r\n                    const { first_name, last_name } = user;\r\n                    const wholeName = `${first_name} ${last_name}`;\r\n\r\n                    return checkIfStringsIncludeFilter(filter, first_name, last_name, wholeName);\r\n                });\r\n\r\n                return {\r\n                    ...state,\r\n                    userList: filteredUserList\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    userList: users\r\n                };\r\n            }\r\n        case ADD_USER:\r\n            const newUser = action.payload;\r\n\r\n            return {\r\n                ...state,\r\n                userList: [...state.userList, newUser]\r\n            };\r\n        case LOGIN_USER:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true\r\n            };\r\n        case LOGOUT_USER:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false\r\n            };\r\n        case SET_PREVIEW_IMAGE:\r\n            const previewImage = action.payload;\r\n\r\n            return {\r\n                ...state,\r\n                previewImage\r\n            };\r\n        default:\r\n            return {\r\n                ...state\r\n            };\r\n    }\r\n}\r\n\r\nexport default userReducer;","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport modalReducer from './modal/modalReducer';\r\nimport userReducer from './user/userReducer';\r\n\r\nconst store = createStore(\r\n    combineReducers({\r\n        modal: modalReducer,\r\n        user: userReducer\r\n    }),\r\n    applyMiddleware(thunk)\r\n);\r\n\r\nexport default store;","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport Navigation from './Components/Navigation';\r\nimport { LoginPage, MainPage } from './Pages';\r\nimport store from './Redux/store';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Provider store={store}>\r\n          <Navigation />\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            component={LoginPage}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/main\"\r\n            component={MainPage}\r\n          />\r\n          <ToastContainer\r\n            position=\"bottom-right\"\r\n            autoClose={3000}\r\n          />\r\n        </Provider>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}